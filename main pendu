from random import randint
import tkinter as tk
from tkinter import messagebox
import tkinter.font as font

fenetre_menu = tk.Tk()
fenetre_menu.title("MENU DU JEU")
fenetre_menu.attributes('-fullscreen', True)
fenetre_menu.configure(bg="black")
fenetre_menu.grid_columnconfigure(0, weight=1)
fenetre_menu.grid_columnconfigure(1, weight=1)
fenetre_menu.grid_columnconfigure(2, weight=1)
fenetre_menu.grid_columnconfigure(3, weight=1)
fenetre_menu.grid_rowconfigure(1, weight=1)
fenetre_menu.grid_rowconfigure(2, weight=1)
fenetre_menu.grid_rowconfigure(3, weight=1)
fenetre_menu.grid_rowconfigure(4, weight=1)
fenetre_menu.grid_rowconfigure(5, weight=1)
font_label = font.Font(size=30)
font_bouton = font.Font(size=20)
font_label2 = font.Font(size=20)
difficulte = 0

def aide():
    regles_jeu = tk.Toplevel()
    regles_jeu.title("LES REGLES DU JEU")
    regles_jeu.attributes('-fullscreen', True)
    regles_jeu.configure(bg="black")
    regles_jeu.grid_columnconfigure(0, weight=1)
    regles_jeu.grid_columnconfigure(1, weight=1)
    regles_jeu.grid_columnconfigure(2, weight=1)
    regles_jeu.grid_columnconfigure(3, weight=1)
    regles_jeu.grid_rowconfigure(1, weight=1)
    regles_jeu.grid_rowconfigure(2, weight=1)
    regles_jeu.grid_rowconfigure(3, weight=1)
    regles_jeu.grid_rowconfigure(4, weight=1)
    regles_jeu.grid_rowconfigure(5, weight=1)

    # Zone de texte avec les règles du jeu
    regles = [
        "LE JEU DU PENDU EST UN JEU DE SOCIÉTÉ OÙ LES JOUEURS DOIVENT DEVENIR UN MOT EN APPUYANT SUR LES LETTRES.",

        "1. LES JOUEURS DOIVENT DEVENIR LE MOT EN PROPOSANT DES LETTRES UNE À UNE.",

        "2. SI UNE LETTRE PROPOSÉE SE TROUVE DANS LE MOT, ELLE EST RÉVÉLÉE DANS LE MOT.",

        "3. SI LA LETTRE PROPOSÉE N'EST PAS DANS LE MOT, UNE PARTIE DU DESSIN D’UN PENDU APPARAÎT.",

        "4. LES JOUEURS ONT LE DROIT A 10 PROPOSITIONS FAUSSES AVANT QUE LE DESSIN NE SOIT COMPLET.",

        "5. SI LE DESSIN DU PENDU EST ENTIER AVANT QUE LE MOT NE SOIT DEVINÉ, LA PARTIE EST PERDUE."
    ]

    # Affichage des règles
    for i, regle in enumerate(regles):
        zone_texte = tk.Label(regles_jeu, text=regle, font=("Helvetica", 15), fg="red", bg="black")
        zone_texte.grid(row=i, column=0)

    # Bouton pour fermer la fenêtre des règles
    bouton_compris = tk.Button(regles_jeu, text="FERMER", command=regles_jeu.destroy, font=("Helvetica", 20), fg="red", bg="black")
    bouton_compris.grid(row=3, column=1)

    regles_jeu.mainloop()


def parse_line( ligne , sep, colonne, type) :
    li = ligne.split(sep)
    if type == "int" :
        return(int(li[colonne]))
    elif type == "str" :
        return(li[colonne])
mote=""
chrge = False

jeu = False


def je(n = None):
    global difficulte
    if n != 1:
        global jeu
        jeu = True
        difficulte=scroller.get()
    fenetre_menu.destroy()


def mots(liste):
    element = randint(0,len(liste)-1)
    mot = liste[element]
    return mot


score = 0
Label_1 = tk.Label(fenetre_menu, text=" JEU DU PENDU ", fg = "black", bg="red")
Label_1['font'] = font_label
Label_2 = tk.Label(fenetre_menu, text="DIFFICULTÉ :", bg="red")
Label_2['font'] = font_label2


scroller=tk.Scale(fenetre_menu ,from_=0, to=8, orient="horizontal", bg="red")


bouton_jouer = tk.Button(fenetre_menu, text="JOUER", command=lambda : je(), bg="red")
bouton_quitter = tk.Button(fenetre_menu, text="QUITTER", command=lambda : je(1), bg="red")
bouton_aide= tk.Button(fenetre_menu, text="AIDE", command=aide, bg="red")

bouton_jouer['font'] = font_bouton
bouton_quitter['font'] = font_bouton
bouton_aide['font'] = font_bouton


Label_1.place(relx=0.5, rely=0.2, anchor=tk.CENTER)
bouton_jouer.place(relx=0.5, rely=0.4, anchor=tk.CENTER)
bouton_quitter.place(relx=0.5, rely=0.6, anchor=tk.CENTER)
bouton_aide.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

Label_2.place(relx=0.3, rely=0.8, anchor=tk.CENTER)
scroller.place(relx=0.5, rely=0.8, anchor=tk.CENTER)

            
fenetre_menu.mainloop()

#------------------------------------------------------------------------------

#------------------------------------------------------------------------------



while jeu == True:
    LISTE_3_LETTRES = [ "ANE", "AXE", "BEL", "BIP", "CAR", "COL", "COQ", "COR", "COU", "CRI", "GAG", "GAZ", "GEL", "JUS", "NET", "NUL", "VAL", "SKI", "SOT", "TAS", "TIC"]
    
    LISTE_4_LETTRES= ["ETRE", "BEAU", "BETE", "BOXE", "BRUN", "CERF", "CHEZ", "CIRE", "FEMME", "DENT", "DOCK", "DODO", "DRAP", "DUNE", "FAUX", "IBIS", "JAZZ", "JOLI", "JOUE", "KAKI", "LOEO", "LOIN", "LONG", "LUNE", "LYNX", "MINE", "MURE", "OUIE", "OURS", "PION", "RHUM", "ROCK", "SEAU", "TEST", "THYM", "TROU", "TRUC", "USER", "VERT", "YOGA"]
    
    LISTE_5_LETTRES= ["ACCES", "AIMER", "ALOES", "ASSEZ", "AVION", "BALAI", "BANJO", "BARBE", "BONNE", "BRUIT", "BUCHE", "CACHE", "CAPOT", "CARTE", "CHIEN", "CRâNE", "CYCLE", "EBENE", "ESSAI", "GIFLE", "JAMBE", "KOALA", "LIVRE", "LOURD", "MAMAN", "MOULT", "NOEUD", "ORTIE", "PêCHE", "POIRE", "POMME", "POSTE", "PRUNE", "RADAR", "RADIS", "ROBOT", "ROUTE", "RUGBY", "SEUIL", "TAUPE", "TENUE", "TEXTE", "TYRAN", "USUEL", "VALSE"]
    
    LISTE_6_LETTRES= ["ACAJOU", "AGNEAU", "ALARME", "ANANAS", "ANGORA", "ANIMAL","ARCADE", "AVIRON", "BABINE", "BALADE", "BONZAI", "BASSIN", "BILLET", "BOUCHE", "BOUCLE", "BRONZE", "CABANE", "CLOCHE", "CHEQUE", "CIRAGE", "CRAYON", "GARAGE", "GOSPEL", "GOULOT", "GRAMME", "GRELOT", "GUENON", "HOCHET", "HORMIS", "HUMOUR", "HURLER", "JARGON", "LIMITE", "LIONNE", "MENTHE", "OISEAU" , "PODIUM", "POULPE", "POUMON", "PUZZLE", "QUARTZ", "RAPIDE", "SEISME", "TETINE", "TOMATE", "WASABI", "WHISKY", "ZIPPER", "ALGERIE"]
    
    
    LISTE_7_LETTRES= ["ABRITER", "BALLAST", "BARYTON", "BASSINE", "BILLARD", "BRETZEL", "CHARIOT", "CLAIRON", "CORBEAU", "CORTEGE", "CRAPAUD", "DENTIER", "DRAPEAU", "EXEMPLE", "FOURMIS", "GRANDIR", "ICEBERG", "JAVELOT" , "JOURNAL", "JOURNEE", "LOSANGE", "MACADAM", "MONDIAL", "NOTABLE", "OXYGENE", "PANIQUE", "PETROLE", "POTERIE", "POUVOIR",  "SCOOTER", "SENTEUR", "SIFFLET", "SPIRALE", "SUCETTE", "TONNEAU", "TROUSSE", "TUNIQUE", "UKULELE", "VAUTOUR", "ZOZOTER"]
    
    LISTE_8_LETTRES= ["AQUARIUM", "ARAIGNEE", "ARBALETE", "ARCHIPEL", "BANQUISE", "BATTERIE", "BROCANTE", "BROUHAHA", "CAPELINE", "CLAVECIN", "CLOPORTE", "DEBUTANT" , "DIAPASON", "GANGSTER", "GOTHIQUE", "HAUTBOIS", "HERISSON", "LOGICIEL", "OBJECTIF", "PARANOIA", "PARCOURS", "PASTICHE", "QUESTION", "SCARABEE", "SCORPION", "SYMPTOME", "TABOURET", "TOMAHWWK", "TOUJOURS", "TOURISME", "TRIANGLE", "UTOPIQUE", "ZEPPELIN"]
    
    LISTE_9_LETTRES=["ACCORDEON", "ASCENSEUR", "ASCENSION", "ASEPTISER", "AUTOROUTE", "AVALANCHE", "BALALAIKA" , "BILBOQUET", "BOURRICOT", "BRILLANCE", "CABRIOLET", "CONTRARIO", "CORNEMUSE", "DANGEREUX", "EPLUCHAGE", "FEODALITE", "FORTERESSE", "GONDOLIER", "GRAPHIQUE", "HOROSCOPE", "INTREPIDE", "KLAXONNER", "MASCARADE", "METAPHORE", "NARRATEUR", "PERIPETIE", "POPULAIRE", "PRINTEMPS", "QUEMANDER", "TAMBOURIN", "VESTIAIRE", "XYLOPHONE"]
    
    
    LISTE_10_LETTRES=["ACROSTICHE", "APOCALYPSE", "ATTRACTION", "AVENTURIER", "BOUILLOTTE", "CITROUILLE", "CONTROVERSE", "COQUELICOT", "DISSIMULER" , "FLIBUSTIER", "FORESTIERE", "GRENOUILLE", "IMPOSSIBLE", "LABYRINTHE", "MAHARADJAH", "PRUDEMMENT", "QUADRICEPS" , "SOLILOQUER", "SUBJECTIVE"]
    
    LISTE_11_LETTREETPLUS = [ "BACCALAUREAT", "ABRACADABRA", "FRANCOPHILE", "PANDEMONIUM", "CHLOROPHYLLE" , "CONSENTEMENT" , "METALLURGIE" , "METAMORPHOSE", "MONTGOLFIERE", "KALEIDOSCOPE", "CONQUISTADOR", "CONSPIRATEUR", "RHODODENDRON", "QUALIFICATION", "PROTOZOAIRE", "QUADRILATERE", "ZYGOMATIQUE", "SORCELLERIE", "BELLIGERANT"]
    

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------


    liste_liste= [LISTE_3_LETTRES,LISTE_4_LETTRES,LISTE_4_LETTRES,LISTE_6_LETTRES,LISTE_7_LETTRES,LISTE_8_LETTRES,LISTE_9_LETTRES,LISTE_10_LETTRES,LISTE_11_LETTREETPLUS]
    def choisirliste(liste,entier):
       return liste[entier]
    
    
    liste = choisirliste(liste_liste, difficulte)

    if chrge:
        mot = mote
    else:
        mot = mots(liste)
    
    print(mot)


    def tiret():
        global mot
        affichage=[]
        for i in range(len(mot)):
            affichage.append('*')
        return affichage


    erreur = 0


    def ecrit_les_coords(evt):
        global erreur
        pos_x, pos_y = evt.x, evt.y
        erreur+=1
        print(pos_x,pos_y)


    def deviner_le_mt(mot1):
        global erreur
        if erreur<10:
            mot1 = mot1.upper()
            if mot == mot1:
                gg3()
            else:
                erreur+=1
                creer_lignes(liste_ligne, erreur, canvas_personnage)
        else:
            lose2()


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------


    fenetre = tk.Tk()
    fenetre.title("Jeu du Pendu")
    fenetre.attributes('-fullscreen', True)
    fenetre.configure(bg="black")
    font_label22 = font.Font(size=15)

    mot_pointille = tiret()

    canvas_personnage = tk.Canvas(fenetre, width=500, height=400, bg="red")

    lettre_deja_donne = []
    lettre_deja_donne2 = []
    label_erreur = tk.Label(fenetre, text="Vous avez fait "+str(erreur)+" erreur(s)", font=("Helvetica", 20), bg="red")
    label_lettre_deja_utilise = tk.Label(fenetre, text="Vous n'avez utilisé aucune lettre ", font=("Helvetica", 20), bg="red")

    entre = tk.Entry(fenetre,width=10, font=("Helvetica", 20), bg="red")

    button_pour_mot = tk.Button(fenetre, text="Deviner le mot ?", command= lambda:deviner_le_mt(entre.get()), font=("Helvetica", 20), bg="red")

    reussite = 0
    label_score = tk.Label(fenetre, text = "Score : "+str(score))



    def change_label_deja(lett):
        global lettre_deja_donne2
        cdc = ''
        for lettre in lettre_deja_donne2:
            cdc = cdc + lettre + ", " 
        label_lettre_deja_utilise.config(text="Vous avez utilisé les lettres : "+cdc, font=("Helvetica", 20), bg="red")

    def change_label_erreur():
        global erreur
        global score
        label_erreur.config(text="Vous avez fait "+str(erreur)+" erreur(s)")
        label_score.config(text="Score : "+str(score), font=("Helvetica", 20), bg="red")
        fenetre.after(10, change_label_erreur)

    change_label_erreur()

    def gg3():
        agagner = tk.Toplevel()
        agagner.title("GAGNÉ")
        agagner.attributes('-fullscreen', True)
        agagner.configure(bg="black")
        agagner.grid_columnconfigure(0, weight=1)
        agagner.grid_columnconfigure(1, weight=1)
        agagner.grid_columnconfigure(2, weight=1)
        agagner.grid_columnconfigure(3, weight=1)
        agagner.grid_rowconfigure(1, weight=1)
        agagner.grid_rowconfigure(2, weight=1)
        agagner.grid_rowconfigure(3, weight=1)
        agagner.grid_rowconfigure(4, weight=1)
        agagner.grid_rowconfigure(5, weight=1)

        # Zone de texte avec les règles du jeu
        rgg2 = [
            "                                                                               ",

            "                                                                               ",

            "                                                                             ",

            "                         VOUS AVEZ GAGNÉ !!!                                 ",

            "                                                                                       ",

            "                                                                                     "
        ]

        # Affichage des règles
        for i, regle in enumerate(rgg2):
            zone_texte = tk.Label(agagner, text=regle, font=("Helvetica", 30), fg="red", bg="black")
            zone_texte.grid(row=i, column=0)

        # Bouton pour fermer la fenêtre des règles
        bouton_fermergg = tk.Button(agagner, text="FERMER", command=fenetre.destroy, font=("Helvetica", 20), fg="red", bg="black")
        bouton_fermergg.grid(row=3, column=1)
    
        agagner.mainloop()

    def lose2():
        lose2 = tk.Toplevel()
        lose2.title("PERDU")
        lose2.attributes('-fullscreen', True)
        lose2.configure(bg="black")
        lose2.grid_columnconfigure(0, weight=1)
        lose2.grid_columnconfigure(1, weight=1)
        lose2.grid_columnconfigure(2, weight=1)
        lose2.grid_columnconfigure(3, weight=1)
        lose2.grid_rowconfigure(1, weight=1)
        lose2.grid_rowconfigure(2, weight=1)
        lose2.grid_rowconfigure(3, weight=1)
        lose2.grid_rowconfigure(4, weight=1)
        lose2.grid_rowconfigure(5, weight=1)

        # Zone de texte avec les règles du jeu
        rl2 = [
            "                                                                               ",

            "                                                                               ",

            "                                                                             ",

            "                         VOUS AVEZ PERDU !!!                                 ",

            "                                                                                       ",

            "                                                                                     "
        ]

        # Affichage des règles
        for i, regle in enumerate(rl2):
            zone_texte = tk.Label(lose2, text=regle, font=("Helvetica", 30), fg="red", bg="black")
            zone_texte.grid(row=i, column=0)

        # Bouton pour fermer la fenêtre des règles
        bouton_fermergg = tk.Button(lose2, text="FERMER", command=fenetre.destroy, font=("Helvetica", 20), fg="red", bg="black")
        bouton_fermergg.grid(row=3, column=1)
    
        lose2.mainloop()


    liste_ligne=[[100,400,400,400],[150,400,150,150],[150,150,300,150],[200,150,150,200],[300,150,300,200],[325,250,275,200],[ 300,250,300,300],[300,275,325,275],[275,275,325,275],   [300,300,325,320],[300,300,275,320]]

    def creer_lignes(liste_ligne, index, canevas):
        x1, y1, x2, y2 = liste_ligne[index-1]
        if index != 6:
            canevas.create_line(x1, y1, x2, y2, fill="black")
        else: canevas.create_oval(x1, y1, x2, y2, outline="black")

    #for i in range(len(liste_ligne)):
    #    creer_lignes(liste_ligne, i, canvas_personnage)


    mot_pointille_shw = ""
    for i in range(len(mot_pointille)):
        mot_pointille_shw = ' '+mot_pointille[i]+mot_pointille_shw

    label_pointille = tk.Label(fenetre, text=str(mot_pointille_shw), font=("Helvetica", 30), bg="red")

    def change_label_pointille(mot):
        mot_pointille_shw = ""
        for i in range(len(mot)):
            mot_pointille_shw = mot_pointille_shw+' '+mot[i]
        label_pointille.config(text=mot_pointille_shw)

    nb_lettre=0
    l_rien=[]
    for i in range(len(mot)):
        if not(mot[i] in l_rien):
            l_rien.append(mot[i])
            nb_lettre+=1

    fenetre.grid_rowconfigure(30, weight=1)
    
    def indications():
        global mot
        indice_rand = randint(0,len(mot)-1)
        lettre_rand = mot[indice_rand]
        while lettre_rand in lettre_deja_donne:
            indice_rand = randint(0,len(mot)-1)
            lettre_rand = mot[indice_rand]
        bouton_indication.grid_forget()

        indications = tk.Toplevel()
        indications.title("PERDU")
        indications.attributes('-fullscreen', True)
        indications.configure(bg="black")
        indications.grid_columnconfigure(0, weight=1)
        indications.grid_columnconfigure(1, weight=1)
        indications.grid_columnconfigure(2, weight=1)
        indications.grid_columnconfigure(3, weight=1)
        indications.grid_rowconfigure(1, weight=1)
        indications.grid_rowconfigure(2, weight=1)
        indications.grid_rowconfigure(3, weight=1)
        indications.grid_rowconfigure(4, weight=1)
        indications.grid_rowconfigure(5, weight=1)

        # Zone de texte avec les règles du jeu
        ind2 = [
            "                                                                               ",

            "                                                                               ",

            "                                                                             ",

            "                   DANS LE MOT, IL Y  LA LETTRE "+str(lettre_rand)                                ,

            "                                                                                       ",

            "                                                                                     "
        ]

        # Affichage des règles
        for i, regle in enumerate(ind2):
            zone_texte = tk.Label(indications, text=regle, font=("Helvetica", 30), fg="red", bg="black")
            zone_texte.grid(row=i, column=0)

        # Bouton pour fermer la fenêtre des règles
        bouton_fermergg = tk.Button(indications, text="FERMER", command=indications.destroy, font=("Helvetica", 20), fg="red", bg="black")
        bouton_fermergg.grid(row=3, column=1)
    
        indications.mainloop()


        
    bouton_indication = tk.Button(fenetre, command = indications,text="Indice pour le mot", font=("Helvetica", 20), bg="red")

    def lettre_dans_le_mot_ou_erreur(lettre):
        global mot
        global mot_pointille
        global erreur
        global liste_ligne
        global canvas_personnage
        global reussite
        global lettre_deja_donne
        global nb_lettre
        global score
        if lettre == "A":
            boutonA.grid_forget()
        if lettre == "B":
            boutonB.grid_forget()
        if lettre == "C":
            boutonC.grid_forget()
        if lettre == "D":
            boutonD.grid_forget()
        if lettre == "E":
            boutonE.grid_forget()
        if lettre == "F":
            boutonF.grid_forget()
        if lettre == "G":
            boutonG.grid_forget()
        if lettre == "H":
            boutonH.grid_forget()
        if lettre == "I":
            boutonI.grid_forget()
        if lettre == "J":
            boutonJ.grid_forget()
        if lettre == "K":
            boutonK.grid_forget()
        if lettre == "L":
            boutonL.grid_forget()
        if lettre == "M":
            boutonM.grid_forget()
        if lettre == "N":
            boutonN.grid_forget()
        if lettre == "O":
            boutonO.grid_forget()
        if lettre == "P":
            boutonP.grid_forget()
        if lettre == "Q":
            boutonQ.grid_forget()
        if lettre == "R":
            boutonR.grid_forget()
        if lettre == "S":
            boutonS.grid_forget()
        if lettre == "T":
            boutonT.grid_forget()
        if lettre == "U":
            boutonU.grid_forget()
        if lettre == "V":
            boutonV.grid_forget()
        if lettre == "W":
            boutonW.grid_forget()
        if lettre == "X":
            boutonX.grid_forget()
        if lettre == "Y":
            boutonY.grid_forget()
        if lettre == "Z":
            boutonZ.grid_forget()
        if lettre in mot:
            for i in range(len(mot)):
                if mot[i] == lettre:
                    mot_pointille[i] = lettre
            if not(lettre in lettre_deja_donne2):
                lettre_deja_donne2.append(lettre)
            change_label_deja(lettre)
            #print(mot_pointille)
            if not (lettre in lettre_deja_donne):
                change_label_pointille(mot_pointille)
                reussite += 1
                lettre_deja_donne.append(lettre)
                #print(reussite)
                #print(mot)
        
            if reussite == nb_lettre:
                gg3()
        
        else:
            
            if not(lettre in lettre_deja_donne2):
                lettre_deja_donne2.append(lettre)
                change_label_deja(lettre)
                erreur +=1
                creer_lignes(liste_ligne, erreur, canvas_personnage)
                score += 1
            if erreur >= 11:
                lose2()



            
    boutonA=tk.Button(fenetre,text="A",command=lambda : lettre_dans_le_mot_ou_erreur("A"), font=("Helvetica", 15), bg="red")
    boutonB=tk.Button(fenetre,text="B",command=lambda : lettre_dans_le_mot_ou_erreur("B"), font=("Helvetica", 15), bg="red")
    boutonC=tk.Button(fenetre,text="C",command=lambda : lettre_dans_le_mot_ou_erreur("C"), font=("Helvetica", 15), bg="red")
    boutonD=tk.Button(fenetre,text="D",command=lambda : lettre_dans_le_mot_ou_erreur("D"), font=("Helvetica", 15), bg="red")
    boutonE=tk.Button(fenetre,text="E",command=lambda : lettre_dans_le_mot_ou_erreur("E"), font=("Helvetica", 15), bg="red")
    boutonF=tk.Button(fenetre,text="F",command=lambda : lettre_dans_le_mot_ou_erreur("F"), font=("Helvetica", 15), bg="red")
    boutonG=tk.Button(fenetre,text="G",command=lambda : lettre_dans_le_mot_ou_erreur("G"), font=("Helvetica", 15), bg="red")
    boutonH=tk.Button(fenetre,text="H",command=lambda : lettre_dans_le_mot_ou_erreur("H"), font=("Helvetica", 15), bg="red")
    boutonI=tk.Button(fenetre,text="I",command=lambda : lettre_dans_le_mot_ou_erreur("I"), font=("Helvetica", 15), bg="red")
    boutonJ=tk.Button(fenetre,text="J",command=lambda : lettre_dans_le_mot_ou_erreur("J"), font=("Helvetica", 15), bg="red")
    boutonK=tk.Button(fenetre,text="K",command=lambda : lettre_dans_le_mot_ou_erreur("K"), font=("Helvetica", 15), bg="red")
    boutonL=tk.Button(fenetre,text="L",command=lambda : lettre_dans_le_mot_ou_erreur("L"), font=("Helvetica", 15), bg="red")
    boutonM=tk.Button(fenetre,text="M",command=lambda : lettre_dans_le_mot_ou_erreur("M"), font=("Helvetica", 15), bg="red")
    boutonN=tk.Button(fenetre,text="N",command=lambda : lettre_dans_le_mot_ou_erreur("N"), font=("Helvetica", 15), bg="red")
    boutonO=tk.Button(fenetre,text="O",command=lambda : lettre_dans_le_mot_ou_erreur("O"), font=("Helvetica", 15), bg="red")
    boutonP=tk.Button(fenetre,text="P",command=lambda : lettre_dans_le_mot_ou_erreur("P"), font=("Helvetica", 15), bg="red")
    boutonQ=tk.Button(fenetre,text="Q",command=lambda : lettre_dans_le_mot_ou_erreur("Q"), font=("Helvetica", 15), bg="red")
    boutonR=tk.Button(fenetre,text="R",command=lambda : lettre_dans_le_mot_ou_erreur("R"), font=("Helvetica", 15), bg="red")
    boutonS=tk.Button(fenetre,text="S",command=lambda : lettre_dans_le_mot_ou_erreur("S"), font=("Helvetica", 15), bg="red")
    boutonT=tk.Button(fenetre,text="T",command=lambda : lettre_dans_le_mot_ou_erreur("T"), font=("Helvetica", 15), bg="red")
    boutonU=tk.Button(fenetre,text="U",command=lambda : lettre_dans_le_mot_ou_erreur("U"), font=("Helvetica", 15), bg="red")
    boutonV=tk.Button(fenetre,text="V",command=lambda : lettre_dans_le_mot_ou_erreur("V"), font=("Helvetica", 15), bg="red")
    boutonW=tk.Button(fenetre,text="W",command=lambda : lettre_dans_le_mot_ou_erreur("W"), font=("Helvetica", 15), bg="red")
    boutonX=tk.Button(fenetre,text="X",command=lambda : lettre_dans_le_mot_ou_erreur("X"), font=("Helvetica", 15), bg="red")
    boutonY=tk.Button(fenetre,text="Y",command=lambda : lettre_dans_le_mot_ou_erreur("Y"), font=("Helvetica", 15), bg="red")
    boutonZ=tk.Button(fenetre,text="Z",command=lambda : lettre_dans_le_mot_ou_erreur("Z"), font=("Helvetica", 15), bg="red")

    bouton_quit=tk.Button(fenetre,text='QUITTER',command=lambda : fenetre.destroy(), font=("Helvetica", 20), bg="red")

  
    boutonA.grid(column=0,row=13)
    boutonB.grid(column=1,row=13)
    boutonC.grid(column=2,row=13)
    boutonD.grid(column=3,row=13)
    boutonE.grid(column=4,row=13)
    boutonF.grid(column=5,row=13)
    boutonG.grid(column=0,row=16)
    boutonH.grid(column=1,row=16)
    boutonI.grid(column=2,row=16)
    boutonJ.grid(column=3,row=16)
    boutonK.grid(column=4,row=16)
    boutonL.grid(column=5,row=16)
    boutonM.grid(column=0,row=19)
    boutonN.grid(column=1,row=19)
    boutonO.grid(column=2,row=19)
    boutonP.grid(column=3,row=19)
    boutonQ.grid(column=4,row=19)
    boutonR.grid(column=5,row=19)
    boutonS.grid(column=0,row=22)
    boutonT.grid(column=1,row=22)
    boutonU.grid(column=2,row=22)
    boutonV.grid(column=3,row=22)
    boutonW.grid(column=4,row=22)
    boutonX.grid(column=5,row=22)
    boutonY.grid(column=2,row=25)
    boutonZ.grid(column=3,row=25) 


    canvas_personnage.grid(row=0, column=0, rowspan=10,columnspan=6)
    label_erreur.grid(row=0,column=15)
    label_pointille.grid(row = 1, column=15)
    label_score.grid(row=5,column=15)
    label_lettre_deja_utilise.grid(row = 15, column=15, columnspan=3) 
    entre.grid(row= 17, column=15)
    button_pour_mot.grid(row= 20, column=15)
    bouton_indication.grid(row = 23, column=15)
    bouton_quit.grid(row=8,column=30)

    fenetre.resizable(width = False, height = False)

    fenetre.mainloop()

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------



    
    # Fin du jeu
    fenetre_fin = tk.Tk() 
    fenetre_fin.title("FIN DU JEU")
    fenetre_fin.attributes('-fullscreen', True) 
    fenetre_fin.configure(bg="black")

# Configuration des lignes pour centrer les boutons
    fenetre_fin.grid_rowconfigure(0, weight=1)
    fenetre_fin.grid_rowconfigure(1, weight=1)
    fenetre_fin.grid_columnconfigure(0, weight=1)

# Définir une fonction pour centrer la fenêtre
    def center_window(window, width, height):
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        x = (screen_width/2) - (width/2)
        y = (screen_height/2) - (height/2)
        window.geometry('%dx%d+%d+%d' % (width, height, x, y))

# Définition de la fonction pour rejouer ou quitter
    def rejouer(ent, fen):
        global jeu
        if ent == 1:
            jeu = True
        else:
            jeu = False
        fen.destroy()  # Détruire la fenêtre de fin du jeu
        if jeu:  # Si le jeu doit être rejoué
            ouvrir_menu_principal()  # Ouvrir le menu principal

    def ouvrir_menu_principal():
        global fenetre_menu
        fenetre_menu = tk.Tk()
        fenetre_menu.title("MENU DU JEU")
        fenetre_menu.attributes('-fullscreen', True)
        fenetre_menu.configure(bg="black")
        fenetre_menu.grid_columnconfigure(0, weight=1)
        fenetre_menu.grid_columnconfigure(1, weight=1)
        fenetre_menu.grid_columnconfigure(2, weight=1)
        fenetre_menu.grid_columnconfigure(3, weight=1)
        fenetre_menu.grid_rowconfigure(1, weight=1)
        fenetre_menu.grid_rowconfigure(2, weight=1)
        fenetre_menu.grid_rowconfigure(3, weight=1)
        fenetre_menu.grid_rowconfigure(4, weight=1)
        fenetre_menu.grid_rowconfigure(5, weight=1)
        font_label = font.Font(size=30)
        font_bouton = font.Font(size=20)
        font_label2 = font.Font(size=20)
        difficulte = 0

        def aide():
            regles_jeu = tk.Toplevel()
            regles_jeu.title("LES REGLES DU JEU")
            regles_jeu.attributes('-fullscreen', True)
            regles_jeu.configure(bg="black")
            regles_jeu.grid_columnconfigure(0, weight=1)
            regles_jeu.grid_columnconfigure(1, weight=1)
            regles_jeu.grid_columnconfigure(2, weight=1)
            regles_jeu.grid_columnconfigure(3, weight=1)
            regles_jeu.grid_rowconfigure(1, weight=1)
            regles_jeu.grid_rowconfigure(2, weight=1)
            regles_jeu.grid_rowconfigure(3, weight=1)
            regles_jeu.grid_rowconfigure(4, weight=1)
            regles_jeu.grid_rowconfigure(5, weight=1)

            # Zone de texte avec les règles du jeu
            regles = [
                "LE JEU DU PENDU EST UN JEU DE SOCIÉTÉ OÙ LES JOUEURS DOIVENT DEVENIR UN MOT EN APPUYANT SUR LES LETTRES.",

                "1. LES JOUEURS DOIVENT DEVENIR LE MOT EN PROPOSANT DES LETTRES UNE À UNE.",

                "2. SI UNE LETTRE PROPOSÉE SE TROUVE DANS LE MOT, ELLE EST RÉVÉLÉE DANS LE MOT.",

                "3. SI LA LETTRE PROPOSÉE N'EST PAS DANS LE MOT, UNE PARTIE DU DESSIN D’UN PENDU APPARAÎT.",

                "4. LES JOUEURS ONT LE DROIT A 10 PROPOSITIONS FAUSSES AVANT QUE LE DESSIN NE SOIT COMPLET.",

                "5. SI LE DESSIN DU PENDU EST ENTIER AVANT QUE LE MOT NE SOIT DEVINÉ, LA PARTIE EST PERDUE."
            ]

            # Affichage des règles
            for i, regle in enumerate(regles):
                zone_texte = tk.Label(regles_jeu, text=regle, font=("Helvetica", 15), fg="red", bg="black")
                zone_texte.grid(row=i, column=0)

            # Bouton pour fermer la fenêtre des règles
            bouton_compris = tk.Button(regles_jeu, text="FERMER", command=regles_jeu.destroy, font=("Helvetica", 20), fg="red", bg="black")
            bouton_compris.grid(row=3, column=1)

            regles_jeu.mainloop()


        def parse_line( ligne , sep, colonne, type) :
            li = ligne.split(sep)
            if type == "int" :
                return(int(li[colonne]))
            elif type == "str" :
                return(li[colonne])
        mote=""
        chrge = False

        jeu = False


        def je(n = None):
            global difficulte
            if n != 1:
                global jeu
                jeu = True
                difficulte=scroller.get()
            fenetre_menu.destroy()


        def mots(liste):
            element = randint(0,len(liste)-1)
            mot = liste[element]
            return mot


        score = 0
        Label_1 = tk.Label(fenetre_menu, text="JEU DU PENDU", fg = "black", bg="red")
        Label_1['font'] = font_label
        Label_2 = tk.Label(fenetre_menu, text="DIFFICULTÉ :", bg="red")
        Label_2['font'] = font_label2


        scroller=tk.Scale(fenetre_menu ,from_=0, to=8, orient="horizontal", bg="red")


        bouton_jouer = tk.Button(fenetre_menu, text="JOUER", command=lambda : je(), bg="red")
        bouton_quitter = tk.Button(fenetre_menu, text="QUITTER", command=lambda : je(1), bg="red")
        bouton_aide= tk.Button(fenetre_menu, text="AIDE", command=aide, bg="red")

        bouton_jouer['font'] = font_bouton
        bouton_quitter['font'] = font_bouton
        bouton_aide['font'] = font_bouton


        Label_1.place(relx=0.5, rely=0.2, anchor=tk.CENTER)
        bouton_jouer.place(relx=0.5, rely=0.4, anchor=tk.CENTER)
        bouton_quitter.place(relx=0.5, rely=0.6, anchor=tk.CENTER)
        bouton_aide.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

        Label_2.place(relx=0.3, rely=0.8, anchor=tk.CENTER)
        scroller.place(relx=0.5, rely=0.8, anchor=tk.CENTER)

                    
        fenetre_menu.mainloop()


# Création des boutons "Rejouer" et "Quitter"
    bouton_rejouer = tk.Button(fenetre_fin, text='REJOUER', command=lambda: rejouer(1, fenetre_fin), font=("Helvetica", 30), bg="red")
    bouton_quitter = tk.Button(fenetre_fin, text='QUITTER', command=lambda: rejouer(0, fenetre_fin), font=("Helvetica", 30), bg="red")

# Centrage des boutons
    bouton_rejouer.pack(side=tk.LEFT, padx=(400, 10), pady=10)
    bouton_quitter.pack(side=tk.RIGHT, padx=(10, 400), pady=10)

# Centrer la fenêtre
    center_window(fenetre_fin, 700, 500)

    fenetre_fin.mainloop()


    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
    #------------------------------------------------------------------------------
